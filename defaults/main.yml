---
# General

neo4j_version: 4.0.1

## Owner
neo4j_user: neo4j
neo4j_group: neo4j

## Service options
neo4j_service_enabled: true  # start on boot
neo4j_service_state: started  # current state: started, stopped
neo4j_service_timeout: 120
neo4j_max_filedescriptors: 60000

## Files & Paths
neo4j_default_database: neo4j
neo4j_installation_path: /var/lib/neo4j
neo4j_log_path: /var/log/neo4j
neo4j_config_path: /etc/neo4j

neo4j_data_path: "{{ neo4j_installation_path }}/data"
neo4j_plugins_path: "{{ neo4j_installation_path }}/plugins"
neo4j_certificates_path: "{{ neo4j_installation_path }}/certificates"
neo4j_lib_path: "{{ neo4j_installation_path }}/lib"
neo4j_import_path: "{{ neo4j_installation_path }}/import"

# CONF

## SECURITY
neo4j_auth_enabled: "true"
neo4j_admin_password: admin  # Change this password asap

## JVM
neo4j_java_xms: 512m
neo4j_java_xmx: 512m

# G1GC generally strikes a good balance between throughput and tail
# latency, without too much tuning.
# -XX:+UseG1GC

# Have common exceptions keep producing stack traces, so they can be
# debugged regardless of how often logs are rotated.
# -XX:-OmitStackTraceInFastThrow

# Make sure that `initmemory` is not only allocated, but committed to
# the process, before starting the database. This reduces memory
# fragmentation, increasing the effectiveness of transparent huge
# pages. It also reduces the possibility of seeing performance drop
# due to heap-growing GC events, where a decrease in available page
# cache leads to an increase in mean IO response time.
# Try reducing the heap memory, if this flag degrades performance.
# -XX:+AlwaysPreTouch

# Trust that non-static final fields are really final.
# This allows more optimizations and improves overall performance.
# NOTE: Disable this if you use embedded mode, or have extensions or dependencies that may use reflection or
# serialization to change the value of final fields!
# -XX:+UnlockExperimentalVMOptions
# -XX:+TrustFinalNonStaticFields

# Disable explicit garbage collection, which is occasionally invoked by the JDK itself.
# -XX:+DisableExplicitGC

# Restrict size of cached JDK buffers to 256 KB
# -Djdk.nio.maxCachedBufferSize=262144

# More efficient buffer allocation in Netty by allowing direct no cleaner buffers.
# -Dio.netty.tryReflectionSetAccessible=true

# Exits JVM on the first occurrence of an out-of-memory error. Its preferrable to restart
# VM in case of out of memory errors.
# -XX:+ExitOnOutOfMemoryError

# Remote JMX monitoring
# -Dcom.sun.management.jmxremote.port=3637
# -Dcom.sun.management.jmxremote.authenticate=true
# -Dcom.sun.management.jmxremote.ssl=false
# -Dcom.sun.management.jmxremote.password.file=/absolute/path/to/conf/jmx.password
# -Dcom.sun.management.jmxremote.access.file=/absolute/path/to/conf/jmx.access

# Some systems cannot discover host name automatically, and need this line configured:
# -Djava.rmi.server.hostname=$THE_NEO4J_SERVER_HOSTNAME

# Expand Diffie Hellman (DH) key size from default 1024 to 2048 for DH-RSA cipher suites used in server TLS handshakes.
# This is to protect the server from any potential passive eavesdropping.
# -Djdk.tls.ephemeralDHKeySize=2048

# This mitigates a DDoS vector.
# -Djdk.tls.rejectClientInitiatedRenegotiation=true

# Enable remote debugging
# -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005

# This filter prevents deserialization of arbitrary objects via java object serialization,
# addressing potential vulnerabilities.
# By default this filter whitelists all neo4j classes, as well as classes from the hazelcast
# library and the java standard library.
# These defaults should only be modified by expert users!
# For more details (including filter syntax) see: https://openjdk.java.net/jeps/290
# -Djdk.serialFilter=java.**;org.neo4j.**;com.neo4j.**;com.hazelcast.**;net.sf.ehcache.Element;com.sun.proxy.*;org.openjdk.jmh.**;!*

neo4j_jvm_additional:
  - -XX:+UseG1GC
  - -XX:-OmitStackTraceInFastThrow
  - -XX:+AlwaysPreTouch
  - -XX:+UnlockExperimentalVMOptions
  - -XX:+TrustFinalNonStaticFields
  - -XX:+DisableExplicitGC
  - -XX:+ExitOnOutOfMemoryError
  - -Djdk.nio.maxCachedBufferSize=262144
  - -Dio.netty.tryReflectionSetAccessible=true
  - -Djdk.tls.ephemeralDHKeySize=2048
  - -Djdk.tls.rejectClientInitiatedRenegotiation=true
  - -Dunsupported.dbms.udc.source=debian
  - "-Djava.rmi.server.hostname={{ ansible_nodename }}"
  - -Dcom.sun.management.jmxremote=true
  - -Dcom.sun.management.jmxremote.port=3637
  - -Dcom.sun.management.jmxremote.local.only=false
  - -Dcom.sun.management.jmxremote.authenticate=false
  - -Dcom.sun.management.jmxremote.ssl=false
  - -Djdk.serialFilter=java.**;org.neo4j.**;com.neo4j.**;com.hazelcast.**;net.sf.ehcache.Element;com.sun.proxy.*;org.openjdk.jmh.**;!*

## CACHE
neo4j_memory_pagecache_size: 512m

## NETWORK
neo4j_address: 0.0.0.0
neo4j_address_name: "{{ ansible_nodename }}"
neo4j_bolt_enabled: "true"
neo4j_bolt_port: 7687
neo4j_http_enabled: "true"
neo4j_http_port: 7474
neo4j_https_enabled: "false"
neo4j_https_port: 7473
neo4j_threads_worker: 2

## LOGGING
neo4j_log_http_enabled: "true"
neo4j_log_http_rotation_keep_number: 5
neo4j_log_http_rotation_size: 20m
neo4j_log_gc_enabled: "true"
# see https://docs.oracle.com/en/java/javase/11/tools/java.html#GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5
neo4j_log_gc_options: -Xlog:gc*,safepoint,age*=trace
neo4j_log_gc_rotation_keep_number: 5
neo4j_log_gc_rotation_size: 20
neo4j_log_debug_level: INFO
neo4j_log_debug_rotation_keep_number: 7
neo4j_log_debug_rotation_size: 20m

## PLUGINS (example)
# neo4j_plugins:
#   - name: neo4j-streams
#     url: https://github.com/neo4j-contrib/neo4j-streams/releases/download/4.0.0/neo4j-streams-4.0.0.jar

# neo4j_plugins_configuration:
#   - name: kafka.zookeeper.connect
#     value: localhost:2181
#   - name: kafka.bootstrap.servers
#     value: localhost:9092


# MISCELLANEOUS
neo4j_force_reinstall: false
